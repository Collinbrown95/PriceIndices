library("devtools")
devtools::submit_cran()
library("devtools")
mleko<-readRDS(file="C:/Users/User/Desktop/dane_skanowane_Kaufland/dane_przygotowane/mleko.rds")
head(mleko)
dataCOICO$retID<-NULL
dataCOICOP$retID<-NULL
dataCOICOP<-readRDS(file="C:/Users/User/Desktop/dane_skanowane_Kaufland/dane_przygotowane/mleko.rds")
dataCOICOP$retID<-NULL
head(dataCOICOP)
dataCOICOP$coicop<-substr(dataCOICOP$coicop, 2, nchar(dataCOICOP$coicop))
head(dataCOICOP)
unique(dataCOICOP$coicop)
dataCOICOP$description_pol<_NULL
dataCOICOP$prices<-dataCOICOP$prices*1.013
dataCOICOP$quantities<-dataCOICOP$quantities/1.013
head(dataCOICOP)
dataCOICOP$prices<-round(dataCOICOP$prices,digits=2)
head(dataCOICOP)
dataCOICOP$quantities<-round(dataCOICOP$quantities,digits=0)
head(dataCOICOP)
dataCOICOP$codeIN<-dataCOICOP$codeIN+123
dataCOICOP$codeIN<-as.integer(dataCOICOP$codeIN)
head(dataCOICOP)
dataCOICOP$codeIN<-mleko$codeIN
head(dataCOICOP)
unique(dataCOICOP$description_pol)
zamiana<-function(x) {}
zamiana<-function(x) {}
zamiana<-function(x) {if }
zamiana<-function (x) {
if (x=="mleko pełne UHT") return ("UHT whole milk")
if (x=="mleko pełne pasteryzowane") return ("pasteurized whole milk")
if (x=="mleko niskotłuszczowe UHT") return ("UHT low-fat milk" "goat's milk")
if (x=="mleko kozie") return ("goat milk")
if (x=="mleko niskotłuszczowe pasteryzowane") return ("low-fat pasteurized milk")
if (x=="mleko zagęszczone i w proszku") return ("concentrated and powdered milk")
}
new<-sapply(dataCOICOP$description_pol, zamiana)
dataCOICOP$description_pol<-new
head(dataCOICOP)
zamiana<-function (x) {
if (x=="mleko pełne UHT") return ("UHT whole milk")
if (x=="mleko pełne pasteryzowane") return ("pasteurized whole milk")
if (x=="mleko niskotłuszczowe UHT") return ("UHT low-fat milk")
if (x=="mleko kozie") return ("goat milk")
if (x=="mleko niskotłuszczowe pasteryzowane") return ("low-fat pasteurized milk")
if (x=="mleko zagęszczone i w proszku") return ("concentrated and powdered milk")
}
return ("mleko pełne UHT")
zamiana<-function (x) {
if (x=="mleko pełne UHT") return ("UHT whole milk")
if (x=="mleko pełne pasteryzowane") return ("pasteurized whole milk")
if (x=="mleko niskotłuszczowe UHT") return ("UHT low-fat milk")
if (x=="mleko kozie") return ("goat milk")
if (x=="mleko niskotłuszczowe pasteryzowane") return ("low-fat pasteurized milk")
if (x=="mleko zagęszczone i w proszku") return ("concentrated and powdered milk")
}
return ("mleko pełne UHT")
head(dataCOICOP)
zamiana(mleko pełne UHT)
zamiana("mleko pełne UHT")
new<-sapply(mleko$description_pol, zamiana)
dataCOICOP$description_pol<-new
head(dataCOICOP)
dataCOICOP$category<-dataCOICOP$description_pol
dataCOICOP$description_pol<-NULL
head(dataCOICOP)
dataCOICOP$coicop<-substr(dataCOICOP$coicop, 2, nchar(dataCOICOP$coicop))
head(dataCOICOP)
dataCOICOP$coicop6<-dataCOICOP$coicop
dataCOICOP$coicop<_NULL
dataCOICOP$coicop<-NULL
head(dataCOICOP)
save(dataCOICOP, file="data/data.rda",compress='xz')
readRDS(file="data/data.rda")
readRDS("data/data.rda")
readRDS("data/data.RDA")
save(dataCOICOP, file="data/dataCOICOP.rda",compress='xz')
readRDS("data/dataCOICOP.rda")
readRDS("data/dataCOICOP.rda")
head(dataCOICOP)
library("dplyr")
dataCOICOP<-dplyr::filter(dataCOICOP, dataCOICOP$time>=as.Date("2020-12-01"))
save(dataCOICOP, file="data/dataCOICOP.rda",compress='xz')
unique(dataCOICOP$time)
columns(dataCOICOP)
colnames(dataCOICOP)
nrow(dataCOICOP)
unnique(dataCOICOP$grammage)
unique(dataCOICOP$grammage)
document()
build()
install()
install()
install(path="PriceIndices")
install()
install()
library("devtools")
install.packages("glue")
library("devtools")
install.packages('ellipsis')
library("devtools")
document()
build()
install()
install.packages('rlang')
install.packages("rlang")
install.packages('rlang')
install()
library("devtools")
install.packages('rlang')
install.packages('rlang')
library("devtools")
library("devtools")
document()
build()
install(path="PriceIndices")
install.packages('tibble')
install.packages("tibble")
install.packages('tibble')
library("devtools")
install(path="PriceIndices")
document()
build()
document()
build()
install()
document()
build()
install()
document()
library("devtools")
document()
build()
install()
library("devtools")
devtools::submit_cran()
install.packages("PriceIndices")
library("PriceIndices")
library("devtools")
document()
build()
install()
library("devtools")
document()
build()
devtools::submit_cran()
library("devtools")
document()
build()
library("PriceIndices")
sales(milk, period="2019-06", set=c(400032, 71772, 82919))
expenditures(milk, period="2019-06", set=c(400032, 71772, 82919))
sales(milk, period="2019-06", set=c(400032, 71772, 82919),hist=TRUE)
sales(milk, period="2019-06", set=c(400032, 71772, 82919),shares=TRUE)
sales(milk, period="2019-06", set=c(400032, 71772, 82919),hist=TRUE,shares=TRUE)
sales(milk, period="2019-06",hist=TRUE,shares=TRUE)
sales(milk, period="2019-06", set=c(400032, 71772, 82919),hist=TRUE,shares=TRUE)
library("devtools")
document()
build()
library("remotes")
remotes::install_github("JacekBialek/PriceIndices")
library("PriceIndices")
expenditures(milk, "2018-12")
geks(milk, "2018-12","2019-12")
geks_fbew(milk, start="2018-12", end="2020-03")
ccdi_fbmw(milk, start="2018-12", end="2020-03")
library("devtools")
devtools::submit_cran()
library("devtools")
document()
build()
library("PriceIndices")
final_index(milk, start = "2018-12", end = "2019-12",
formula = "QMp", groups = TRUE, outlets = TRUE,
aggr = "laspeyres", by = "description", r=2.74,
interval = TRUE)
library("PriceIndices")
final_index(milk, start = "2018-12", end = "2019-12",
formula = "QMp", groups = TRUE, outlets = TRUE,
aggr = "laspeyres", by = "description", r=2,
interval = TRUE)
library("PriceIndices")
final_index(milk, start = "2018-12", end = "2019-12",
formula = "fisher", groups = TRUE, outlets = TRUE,
aggr = "laspeyres", by = "description",
interval = TRUE)
library("PriceIndices")
price_indices(milk,
start="2018-12",end="2019-12",
formula=c("geks","ccdi","hybrid","fisher",
"QMp","young","geksl_fbew"),
window=c(13,13),
base=c("2019-03","2019-03"),
r=c(3),interval=FALSE)
library("devtools")
document()
build()
library("PriceIndices")
document()
library("devtools")
document()
build()
library("devtools")
document()
build()
library("devtools")
document()
build()
library("devtools")
document()
build()
library("devtools")
document()
build()
library("devtools")
document()
build()
library("devtools")
document()
build()
library("devtools")
document()
build()
library("devtools")
document()
build()
library("remotes")
install_github("JacekBialek/PriceIndices")
library("devtools")
document()
build()
library("devtools")
document()
build()
library("devtools")
document()
build()
library("devtools")
document()
build()
library("devtools")
document()
build()
library("devtools")
document()
build()
document()
library("devtools")
document()
build()
rstudioDiagnosticsReport()
install.packages("usethis")
install.packages("usethis")
library("devtools")
devtools::submit_cran()
library("devtools")
document()
build()
dataCOICOP<-read.csv("dataCOICOP.csv")
head(dataCOICOP)
library("PriceIndices")
data<-dataCOICOP
head(data)
data$description<-iconv(data$description,  "UTF-8", "ASCII","")
head(data)
unique(data$description)
dataCOICOP<-data
save(dataCOICOP, file="data/dataCOICOP.rda",compress='xz')
library("devtools")
document()
build()
library("devtools")
devtools::submit_cran()
